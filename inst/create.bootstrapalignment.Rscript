cat("#######################################################
# create.bootstrapalignment: create bootstrapalignment
# This is version 151202.	
#######################################################")
args <- commandArgs()
if(!any(args=='--args'))
	args<- vector("numeric",0)
if(any(args=='--args'))
	args<- args[-(1:match("--args", args)) ]
#	default args
indir					<- outdir		<- infile	<- NA	
verbose					<- resume		<- 1
opt.bootstrap.by		<- "codon"
output.format			<- "phylip"
bs						<- 0
check.any.bs.identical	<- 0

if(exists("args"))
{
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,6),
								indir= return(substr(arg,8,nchar(arg))),NA)	}))
	if(length(tmp)>0) indir<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,7),
								outdir= return(substr(arg,9,nchar(arg))),NA)	}))
	if(length(tmp)>0) outdir<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,7),
								infile= return(substr(arg,9,nchar(arg))),NA)	}))
	if(length(tmp)>0) infile<- tmp[1]				
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,7),
								resume= return(as.numeric(substr(arg,9,nchar(arg)))),NA)	}))
	if(length(tmp)>0) resume<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,2),
								v= return(as.numeric(substr(arg,4,nchar(arg)))),NA)	}))
	if(length(tmp)>0) verbose<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,10),
								bootstrap= return(as.numeric(substr(arg,12,nchar(arg)))),NA)	}))
	if(length(tmp)>0) bs<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,3),
								by= return(substr(arg,5,nchar(arg))),NA)	}))
	if(length(tmp)>0) opt.bootstrap.by<- tmp[1]
	tmp<- na.omit(sapply(args,function(arg)
					{	switch(substr(arg,2,14),
								output.format= return(substr(arg,16,nchar(arg))),NA)	}))
	if(length(tmp)>0) output.format<- tmp[1]
}
if( is.na(indir) || is.na(infile) || is.na(outdir) || !opt.bootstrap.by%in%c("nucleotide","codon"))
{
	stop('\nUsage:
Rscript create.bootstrapalignment -indir=INDIR -infile=INFILE -outdir=OUTDIR -resume=RESUME -bootstrap=BS -by=BY 
where
INDIR\tinput directory
INFILE\tfasta input file
OUTDIR\toutput directory
RESUME\tFlag 0/1 to resume calculations
BS\tInteger bootstrap ID to append to file name
BY\tBootstrap resampling options. Either "nucleotide" or "codon".
')
}
if(verbose)
{
	cat('\ninput args\n',paste(indir, infile, outdir, bs, opt.bootstrap.by, output.format, sep='\n'))		
}
###############################################################################
#	run script
library(ape)
library(data.table)
library(big.phylo)

if(output.format=="phylip")
	pattern <- paste(infile,".phylip.",sprintf("%03d",bs),sep='')
if(output.format=="fasta")
	pattern <- paste(infile,".fasta.",sprintf("%03d",bs),sep='')
file		<- list.files(path=outdir, pattern=pattern, full.names=1)
if(!resume || !length(file))	
{					
	if(!any(paste(infile,'.R',sep='')==list.files(outdir, pattern='.R$')))
	{
		file		<- paste(outdir,"/",infile,".fasta",sep='')
		if(!file.exists(file))
			file	<- paste(outdir,"/",infile,".fa",sep='')
		stopifnot( file.exists(file) )
		#file2		<- paste(outdir,"/",infile,".fasta2",sep='')
		#system(paste("sed 's/<unknown description>//' ",file," > ",file2,sep=''))		
		if(verbose) cat(paste("\nread",file))
		seq.PROT.RT	<- read.dna( file, format='fasta' )
	}
	if(any(paste(infile,'.R',sep='')==list.files(outdir, pattern='.R$')))
	{
		file		<- paste(outdir,"/",infile,".R",sep='')
		if(verbose) cat(paste("\nread",file))
		tmp			<- load(file)
		if(length(tmp)!=1)		
			stop("Unexpected lenght of loaded objects")
		eval(parse(text=paste("seq.PROT.RT<- ",tmp,sep='')))			
	}
	if(!"DNAbin"%in%class(seq.PROT.RT) || !is.matrix(seq.PROT.RT))	
		stop("expect R infile that contains a DNAbin matrix")
	print(seq.PROT.RT)
	#	check for undetermined sequences - if present, delete
	seq.PROT.RT			<- as.character(seq.PROT.RT)
	tmp					<- which(apply(seq.PROT.RT, 1, function(x) all(x%in%c('?','-','n'))))
	if(length(tmp))
	{
		cat('\nFound entirely undetermined sequences, delete. n=', length(tmp))
		seq.PROT.RT		<- seq.PROT.RT[-tmp,]
	}	
	seq.PROT.RT			<- as.DNAbin( seq.PROT.RT )
	#print(bs)
	if(bs)		#keep bs0 intact
	{
		dummy			<- 0
		any.eq			<- 1
		j				<- 0
		while(any.eq)
		{
			j			<- j+1
			if(opt.bootstrap.by=="codon")
			{
				bs.blocks.n	<- floor( ncol(seq.PROT.RT )/3)
				bs.blocks.s	<- sample(seq_len(bs.blocks.n),bs.blocks.n,replace=T)-1
				bs.seq.s	<- as.numeric( sapply(bs.blocks.s,function(x)		3*x+c(1,2,3)		) )
			}
			if(opt.bootstrap.by=="nucleotide")
			{
				bs.seq.s	<- sample(seq_len(ncol(seq.PROT.RT )),ncol(seq.PROT.RT ),replace=T)
			}
			seq.BS		<- seq.PROT.RT[,bs.seq.s]				
			if(check.any.bs.identical)
			{
				if(verbose) cat(paste("\ncheck for identity proposed boostrap seq alignment no",j))
				#check no seqs identical								
				for(i1 in seq_len(nrow(seq.BS)-1))
				{
					seq1		<- seq.BS[i1,]
					tmp			<- 1-sapply(seq.int(i1+1,nrow(seq.BS)),function(i2)
							{		
								.C("hivc_dist_ambiguous_dna", seq1, seq.BS[i2,], ncol(seq1), dummy )[[4]]			
							})
					#print(tmp)
					if(any(tmp==0))
					{
						print(tmp)
						break
					}									
					if(i1==nrow(seq.BS)-1)
						any.eq	<- 0
				}
				if(verbose) cat(paste("\nchecked for identity proposed boostrap seq alignment no",j,"is any identical",any.eq))
			}
			if(!check.any.bs.identical)
				any.eq	<- 0
		}					
	}
	if(!bs)
	{
		cat(paste("\nkeep boostrap seq alignment no",bs,"as original"))
		seq.BS	<- seq.PROT.RT
	}
	if(output.format=="phylip")
	{
		file		<- paste(outdir,"/",infile,".phylip.",sprintf("%03d",bs),sep='')
		cat(paste("\nsave boostrap seq alignment to",file))
		seq.write.dna.phylip(seq.BS, file=file)	
	}
	if(output.format=="fasta")
	{
		file		<- paste(outdir,"/",infile,".fasta.",sprintf("%03d",bs),sep='')
		cat(paste("\nsave boostrap seq alignment to",file))
		write.dna(seq.BS, file=file, format='fa')	
	}
}
	
