library(argparse, quietly=TRUE, warn.conflicts=FALSE)
#	default args
if(0)
{	
	infile.dates	<- "/Users/Oliver/Dropbox (SPH Imperial College)/2016_ATHENA_Oct_Update/preprocessed/ATHENA_1610_Sequences_LANL_Dates.csv"
	infile.tree		<- "/Users/Oliver/Dropbox (SPH Imperial College)/2016_ATHENA_Oct_Update/preprocessed/ExaML_result.ATHENA_1610_Sequences_LANL_codonaligned_noDRM_noROGUE_subtype_B.finaltree.000"
	outdir			<- indir
	outfile.lsd		<- paste(infile.tree,'.lsd',sep='')
	run.lsd			<- 0
	ali.len			<- 1300
	verbose			<- 1
}
#	read args from command line
arg_parser			<- ArgumentParser(description="Rscript to generate the LSD Dates file.")
arg_parser$add_argument("-i", "--infile.dates", action="store", help="Input dates file in csv format with two columns TAXA and DATES that contains all or some dates for the taxa in the tree.")
arg_parser$add_argument("-t", "--infile.tree", action="store", help="Input tree file with branches in subst site.")
arg_parser$add_argument("-d", "--outfile.lsd.dates", action="store", help="Outfile for LSD Dates csv file.")
arg_parser$add_argument("-l", "--outfile.lsd", action="store", help="Outfile basename for LSD output.")
arg_parser$add_argument("-r", "--root", action="store", help="Name of root if infile.tree is to be rooted.")
arg_parser$add_argument("-a", "--ali.len", default='1300', action="store", help="Number of alignment positions.")
arg_parser$add_argument("-e", "--exclude.missing.dates", default=FALSE, action="store_true", help="If true, all taxa with missing dates are dropped.")
arg_parser$add_argument("-m", "--outfile.tree", action="store", help="Output tree file if further operations are performed on the tree before LSD is run.")
arg_parser$add_argument("-x", "--run.lsd", default=FALSE, action="store_true", help="If set, run LSD as part of this Rscript.")

args 				<- arg_parser$parse_args()
infile.dates 		<- args$infile.dates
infile.tree 		<- args$infile.tree
outfile.lsd 		<- args$outfile.lsd
outfile.lsd.dates 	<- args$outfile.lsd.dates
run.lsd 			<- args$run.lsd
root				<- args$root
ali.len 			<- as.numeric(args$ali.len)
no.miss.dates		<- args$exclude.missing.dates
outfile.tree		<- args$outfile.tree

stopifnot(	!is.null(infile.dates), !is.null(infile.tree), 
			!is.null(outfile.lsd.dates), !is.null(no.miss.dates), !is.null(run.lsd), !is.null(ali.len))	
#
#	start script
#
require(ape)
require(phytools)
require(data.table)
require(big.phylo)
#
#	get dates for taxa in tree
#
dfd		<- as.data.table(read.csv(infile.dates, stringsAsFactors=FALSE))	#dates
ph		<- read.tree(infile.tree)
phd		<- data.table(TAXA=ph$tip.label)	#tip labels for which we need to write dates
tmp		<- setdiff(phd[, TAXA], dfd[, TAXA])
if(length(tmp))
	cat('\nWarning: Found taxa in tree that are not in Dates file:', paste(tmp, collapse=', '))
phd		<- merge(phd, dfd, by='TAXA', all.x=1)
cat('\nNumber of taxa without a Date:', phd[, length(which(is.na(DATE)))])
#
#	options: 
#	1- drop taxa with no dates		
if(no.miss.dates)
{
	cat('\nDropping taxa without dates')
	stopifnot(!is.null(outfile.tree))
	ph	<- drop.tip(ph, subset(phd, is.na(DATE))[, TAXA])	
}
#	2- root input tree
if(!is.null(root))
{
	cat('\nRe-rooting tree to ', root)
	stopifnot(!is.null(outfile.tree))		
	tmp			<- which(grepl(root,ph$tip.label))
	if(length(tmp)>1)
		tmp		<- getMRCA(ph,tmp)
	ph			<- reroot(ph, tmp, ph$edge.length[which(ph$edge[,2]==tmp)])	
	ph			<- ladderize(ph)	
}
if(!is.null(outfile.tree))
{
	cat('\nWriting tree to ', outfile.tree)
	write.tree(ph, file=outfile.tree)	
}
#
#	write LSD dates file
#		
phd		<- subset(phd, !is.na(DATE))
tmp		<- phd[,  list(STR=paste(TAXA,' ',DATE,sep='')), by='TAXA'][, paste(STR, collapse='\n')]
tmp		<- paste(nrow(phd),'\n',tmp,sep='')
cat('\nWriting LSD dates file to ', outfile.lsd.dates)
cat(tmp, file=outfile.lsd.dates)
#
#	run LSD if requested
#
if(run.lsd)
{
	stopifnot(is.null(outfile.lsd))
	tmp	<- ifelse(no.miss.dates, outfile.tree, infile.tree)
	cmd	<- cmd.lsd(tmp, outfile.lsd.dates, ali.len, outfile=outfile.lsd, pr.args='-v 2 -c -b 10 -r as')
	system(cmd)
}

