library(argparse, quietly=TRUE, warn.conflicts=FALSE)
#	default args
if(0)
{	
	infile.dates		<- "/Users/Oliver/Dropbox (SPH Imperial College)/2016_ATHENA_Oct_Update/preprocessed/ATHENA_1610_Sequences_LANL_Dates.csv"
	infile.tree			<- "/Users/Oliver/Dropbox (SPH Imperial College)/2016_ATHENA_Oct_Update/preprocessed/ExaML_result.ATHENA_1610_Sequences_LANL_codonaligned_noDRM_noROGUE_subtype_B.finaltree.000"	
	outfile				<- paste(infile.tree,'.lsd',sep='')	
	ali.len				<- 1300
	root				<- 'OUTGROUP'
	omega0				<- 1.7e-3
	minblen				<- NA	
	verbose				<- 1
}
#	read args from command line
arg_parser			<- ArgumentParser(description="Rscript to run TreeDater.")
arg_parser$add_argument("-i", "--infile.dates", action="store", help="Input dates file in csv format with two columns TAXA and DATES that contains all or some dates for the taxa in the tree.")
arg_parser$add_argument("-t", "--infile.tree", action="store", help="Input tree file with branches in subst site.")
arg_parser$add_argument("-o", "--outfile", action="store", help="Outfile basename for TreeDater output.")
arg_parser$add_argument("-r", "--root", action="store", help="Name of root if infile.tree is to be rooted.")
arg_parser$add_argument("-a", "--ali.len", default='1300', action="store", help="Number of alignment positions.")
arg_parser$add_argument("-m", "--omega0", default='NA', action="store", help="Initial mean substitution rate.")
args 				<- arg_parser$parse_args()
infile.dates 		<- args$infile.dates
infile.tree 		<- args$infile.tree
outfile		 		<- args$outfile
root				<- args$root
ali.len 			<- as.numeric(args$ali.len)
omega0				<- as.numeric(args$omega0)
minblen				<- NA

stopifnot(	!is.null(infile.dates), !is.null(infile.tree), !is.null(outfile), !is.null(ali.len))	
#
#	start script
#
require(ape)
library(treedater, quietly=TRUE, warn.conflicts=FALSE)
require(phytools)
require(data.table)
require(big.phylo)
#	read files
ph			<- read.tree(infile.tree)
ph.dates	<- as.data.table(read.csv(infile.dates, stringsAsFactors=FALSE))	#dates
#	root if desired
if(!is.null(root) & !any(is.na(root)))
{
	cat('\nRe-rooting tree to ', root)		
	tmp			<- which(grepl(root,ph$tip.label))
	if(length(tmp)>1)
		tmp		<- getMRCA(ph,tmp)
	ph			<- reroot(ph, tmp, ph$edge.length[which(ph$edge[,2]==tmp)])	
	ph			<- ladderize(ph)			
}	
#	get dates
phd		<- data.table(TAXA=ph$tip.label)	#tip labels for which we need to write dates
tmp		<- setdiff(phd[, TAXA], ph.dates[, TAXA])
if(length(tmp))
	cat('\nWarning: Found taxa in tree that are not in Dates file:', paste(tmp, collapse=', '))
phd		<- merge(phd, ph.dates, by='TAXA', all.x=1)
cat('\nDropping taxa without a Date:', phd[, length(which(is.na(DATE)))])
ph		<- drop.tip(ph, subset(phd, is.na(DATE))[, TAXA])
phd		<- subset(phd, !is.na(DATE))
phd		<- merge(data.table(TAXA=ph$tip.label, TIP_ID=seq_along(ph$tip.label)), phd, by='TAXA')
setkey(phd, TIP_ID)
#	run dater
ans		<- dater(ph, phd[, DATE], ali.len, omega0=omega0, minblen=minblen)
#	save to output file
cat('\nWriting tree to ', outfile)
write.tree(ans$tre, file=outfile)
cat('\nSave output to ', paste(outfile,'.rda',sep=''))
save(ans, file=paste(outfile,'.rda',sep=''))
